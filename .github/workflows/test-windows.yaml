name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: ${{ matrix.lisp }} on ${{ matrix.os }}
    strategy:
      matrix: 
        # sbcl32 and clisp32 don't work, clasp won't build on CI servers?
        #lisp: [sbcl-bin,sbcl,ccl,ccl32,ecl,clisp,allegro,cmucl,abcl]
        #os: [ubuntu-latest, macos-latest, windows-latest]
        #lisp: [ccl, ccl32]
        #lisp: [ sbcl, ecl, abcl]
        #lisp: [sbcl-bin,ccl32,allegro,cmucl]
        #os: [ ubuntu-latest ]
        lisp: [sbcl,ecl,clisp,abcl,allegro,cmucl]
        os: [windows-latest]
        exclude:
          # some binaries don't install properly on windows?
           - os: windows-latest
             lisp: allegro
           - os: windows-latest
             lisp: cmucl
           - os: windows-latest
             lisp: abcl
           - os: windows-latest
             lisp: ecl
           - os: windows-latest
             lisp: clisp
          # skip 32bit lisps on osx
           - os: macos-latest
             lisp: sbcl32
           - os: macos-latest
             lisp: ccl32
           - os: macos-latest
             lisp: clisp32
           - os: macos-latest
             lisp: allegro
           - os: macos-latest
             lisp: cmucl
      fail-fast: false
      
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        # specify shell explicitly to get msys instead of git-bash on windows
        shell: bash --login -eo pipefail "{0}"
        
    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # set up MSYS shell on windows
    - name: windows specific settings
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        git config --global core.autocrlf false
        echo "::set-env name=MSYSTEM::MINGW64"
        echo "::set-env name=MSYSCON::defterm"
        echo "::add-path::C:\msys64\usr\bin\"
    - name: Print system version
      run: |
        uname
    - name: Install extra packages on windows
      if: matrix.os == 'windows-latest'
      run: |
        # see what's installed
        pacman -Q
        # install something from msys/mingw
        # pacman -S --noconfirm mingw64/mingw-w64-x86_64-zlib
    # check out extra repo if not in QL, or version in ql is too old
    - run: mkdir -p ~/lisp/
#    - name: trivial-features from git
#      uses: actions/checkout@v2
#      with:
#        repository: trivial-features/trivial-features
#        path: ~/lisp/trivial-features
#    - name: mmap from git
#      uses: actions/checkout@v2
#      with:
#        repository: Shinmera/mmap
#        path: ~/lisp/mmap
    
#    - name: pngload merge from git
#      uses: actions/checkout@v2
#      with:
#        repository: 3b/pngload
#        path: ~/lisp/pngload
#        ref: tmp
    
#    - name: 3bz from git
#      uses: actions/checkout@v2
#      with:
#        repository: 3b/3bz
#        path: ~/lisp/3bz
    
#    - name: calculate cache name
#      run: echo "::set-env name=cache-key::$(date +%B%d)"
   
    - name: caches
      run: |
        echo cache key = ${{ env.cache-key }}
        echo ${{ runner.os }}-${{ matrix.lisp }}-dot-roswell-${{ hashFiles('**/*.asd') }}
    

    - name: cache .roswell
      id: cache-dot-roswell
      uses: actions/cache@v1
      with:
        path: ~/.roswell
        key: ${{ runner.os }}-${{ matrix.lisp }}-dot-roswell-${{ hashFiles('**/*.asd') }}
        restore-keys: ${{ runner.os }}-${{ matrix.lisp }}-dot-roswell-
        
    - name: install roswell
      # always run install, since it does some global installs and setup that isn't cached
      continue-on-error: true
      env:
       LISP: ${{ matrix.lisp }}
      run: curl -L https://raw.githubusercontent.com/roswell/roswell/master/scripts/install-for-ci.sh | sh -x
      #run: curl -L https://raw.githubusercontent.com/3b/roswell/master/scripts/install-for-ci.sh | sh -x
    
    - name: install clisp from apt
      if: matrix.lisp == 'clisp'  && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt install clisp
        ros use clisp/system
    - name: run lisp
      continue-on-error: true
      run: |
        echo 1
        echo "path=$PATH"
        ros -e '(format t "~a:~a on ~a~%...~%~%" (lisp-implementation-type) (lisp-implementation-version) (machine-type))'
        echo 3
        ros -e '(format t " fixnum bits:~a~%" (integer-length most-positive-fixnum))'
        ros -e "(format t \"tf = ~s~%\" (ql:where-is-system 'trivial-features))"
        ros -e "(format t \"pngload= ~s~%\" (ql:where-is-system 'pngload))"
        ros -e '(format t "init features = ~s~%" *features*)'
        ros -e "(ql:quickload 'trivial-features)" -e '(format t "features = ~s~%" *features*)'
        
    - name: clear fasl cache
      run: |
        rm -rf ~/.cache/common-lisp/
        mkdir -p ~/.cache/common-lisp/
        
    - name: cmucl hax
      # cmucl gets some build errors on deps we don't actually need, so try a few extra loads
      continue-on-error: true
      if: matrix.lisp == 'cmucl'
      run: |
        ros -s testing123
        ros -s testing123
 
    - name: load code from clean fasl cache
      run: |
        ros -e '(handler-bind (#+asdf3.2(asdf:bad-SYSTEM-NAME (function MUFFLE-WARNING))) (handler-case (ql:quickload :testing123) (error (a) (format t "caught error ~s~%~a~%" a a) (uiop:quit 123))))'
        
    - name: load code from fasls and run tests
      #run: ros -e "(ql:quickload :testing123)" -e "(pngload.test:test-images)"
      run: |
        ros -e '(handler-bind (#+asdf3.2(asdf:bad-system-name (function muffle-warning))) (handler-case (ql:quickload :testing123) (error (a) (format t "caught error ~s~%~a~%" a a) (uiop:quit 123))))' -e '(handler-case (pngload.test:test-images) (t (a) (format t "caught error ~s~%~a~%" a a) (uiop:quit 124)))'
        
    - name: test read times
      run: |
        curl http://3bb.cc/tmp/fft.png -o fft.png
        ros -e "(ql:quickload 'testing123)" -e '(pngload.test:test-read-times "fft.png" :count 10)'
